version: '3'
services:
  # MESSAGE BROKER
  rabbitmq:
    image: rabbitmq:3-management
    hostname: rabbitmq
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - '5672:5672'
      - '15672:15672'
    env_file:
      - .env

  # DATABASE
  postgres:
    image: postgres:15
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
    - ./postgres/data:/var/lib/postgresql/data # If something goes wrong with container - data would be still saved in local machine inside of db/data

  # DATABASE - Caching
  redis:
    image: redis
    env_file:
      - .env
    ports:
      - "6379:6379"
    volumes:
      - ./redis/data:/data # Same as for postgres
    command: /bin/sh -c "redis-server --requirepass $$REDIS_PASSWORD" # Passwords taken from .env

  # MICROSERVICE - Authorization
  auth:
    build:
      context: ./
      dockerfile: ./apps/auth/Dockerfile
    env_file:
      - .env
    depends_on:
      - rabbitmq
      - postgres
    volumes:
      - .:/usr/src/app # Any change to base folder should be reflected.
      - /usr/src/app/node_modules # Take node_modules from docker container.
    command: npm run start:dev auth # Overrides CMD from Dockerfile

  # MICROSERVICE - Uploads
  uploads:
    build:
      context: ./
      dockerfile: ./apps/uploads/Dockerfile
    ports:
     - 5123:5123
    env_file:
      - .env
    depends_on:
      - auth
      - postgres
      - redis
    volumes:
      - ./apps/uploads/public:/usr/src/app/apps/uploads/public
      - .:/usr/src/app # Any change to base folder should be reflected.
      - /usr/src/app/node_modules # Take node_modules from docker container.
    command: npm run start:dev uploads # Overrides CMD from Dockerfile

  # MICROSERVICE - Presence
  presence:
    build:
      context: ./
      dockerfile: ./apps/presence/Dockerfile
    ports:
      - 4000:4000
    env_file:
      - .env
    depends_on:
      - auth
      - chat
      - rabbitmq
      - postgres
      - redis
    volumes:
      - .:/usr/src/app # Any change to base folder should be reflected.
      - /usr/src/app/node_modules # Take node_modules from docker container.
    command: npm run start:dev presence # Overrides CMD from Dockerfile

  # MICROSERVICE - Chat
  chat:
    build:
      context: ./
      dockerfile: ./apps/chat/Dockerfile
    ports:
      - 5000:5000
    env_file:
      - .env
    depends_on:
      - auth
      - uploads
      - rabbitmq
      - postgres
      - redis
    volumes:
      - .:/usr/src/app # Any change to base folder should be reflected.
      - /usr/src/app/node_modules # Take node_modules from docker container.
    command: npm run start:dev chat # Overrides CMD from Dockerfile

  # API
  api:
    build:
      context: ./
      dockerfile: ./apps/api/Dockerfile
    ports:
      - 3000:3000
    env_file:
      - .env
    depends_on:
      - rabbitmq
      - auth
      - presence
      - chat
      - uploads
    volumes:
      - .:/usr/src/app # Any change to base folder should be reflected.
      - /usr/src/app/node_modules # Take node_modules from docker container.
    command: npm run start:dev api # Overrides CMD from Dockerfile

volumes:
  rabbitmq_data: